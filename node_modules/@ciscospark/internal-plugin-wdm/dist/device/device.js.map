{"version":3,"sources":["device.js"],"names":["decider","config","ephemeral","Device","extend","children","features","collections","serviceCatalog","idAttribute","namespace","props","deviceType","intranetInactivityDuration","intranetInactivityCheckUrl","modificationTime","searchEncryptionKeyUrl","services","default","type","serviceHostMap","serviceLinks","hostCatalog","url","userId","webFileShareControl","webSocketUrl","derived","registered","deps","fn","Boolean","session","logoutTimer","lastUserActivityDate","determineService","key","serviceUrl","startsWith","resolve","substr","length","reject","Error","getServiceUrl","service","_getServiceUrl","then","isServiceUrl","getPreDiscoveryServiceUrl","preDiscoveryServices","getWebSocketUrl","useServiceCatalogUrl","uri","inferServiceFromUrl","s","replaceUrlWithCurrentHost","markUrlFailedAndGetNew","logger","info","markFailedAndCycleUrl","spark","internal","metrics","submitClientMetrics","tags","action","failedUrl","newUrl","catch","_fetchNewUrls","refresh","on","initialize","args","prototype","forEach","collectionName","model","value","options","trigger","_updateServiceCatalog","listenToAndRun","_resetLogoutTimer","listenTo","Date","now","inspect","depth","serialize","isPreDiscoveryService","_isService","isPreDiscoveryServiceUrl","_isServiceUrl","isService","isSpecificService","includes","target","feature","developer","get","register","body","ttl","ephemeralDeviceTTL","request","method","res","_processRegistrationSuccess","reason","statusCode","clear","defaults","resource","unregister","warn","clearTimeout","refreshTimer","set","delay","newRegistration","u","parse","hosts","host","defaultUrl","availableHosts","remove","unset","enableInactivityEnforcement","once","timer","headers","trackingid","logout"],"mappings":"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","file":"device.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {oneFlight} from '@ciscospark/common';\nimport {safeSetTimeout} from '@ciscospark/common-timers';\nimport {omit} from 'lodash';\nimport util from 'util';\nimport FeaturesModel from './features-model';\nimport ServiceCollection from './service-collection';\nimport {persist, waitForValue, SparkPlugin} from '@ciscospark/spark-core';\nimport Url from 'url';\n\n/**\n * Decides if this device should be persisted to boundedStorage, based on\n * this.config.ephemeral.\n * @returns {Boolean}\n */\nfunction decider() {\n  return !this.config.ephemeral;\n}\n\nconst Device = SparkPlugin.extend({\n  children: {\n    features: FeaturesModel\n  },\n\n  collections: {\n    serviceCatalog: ServiceCollection\n  },\n\n  idAttribute: 'url',\n\n  namespace: 'Device',\n\n  props: {\n    // deviceType doesn't have any real value, but we need to send it during\n    // device refresh to make sure we don't get back an ios device url\n    deviceType: 'string',\n    intranetInactivityDuration: 'number',\n    intranetInactivityCheckUrl: 'string',\n    modificationTime: 'string',\n    searchEncryptionKeyUrl: 'string',\n    services: {\n      // Even though @jodykstr will tell you the docs claim you don't need to\n      // initialize `object` properties, the docs lie.\n      default() {\n        return {};\n      },\n      type: 'object'\n    },\n    serviceHostMap: {\n      default() {\n        return {\n          serviceLinks: {},\n          hostCatalog: {}\n        };\n      },\n      type: 'object'\n    },\n    url: 'string',\n    userId: 'string',\n    /**\n     * Notifies the client if file sharing is disabled.\n     * Currently, the values for it are:\n     * - BLOCK_BOTH\n     * - BLOCK_UPLOAD\n     * @instance\n     * @memberof Device\n     * @type {string}\n     */\n    webFileShareControl: 'string',\n    webSocketUrl: 'string'\n  },\n\n  derived: {\n    registered: {\n      deps: ['url'],\n      fn() {\n        return Boolean(this.url);\n      }\n    }\n  },\n\n  session: {\n    // Fun Fact: setTimeout returns a Timer object instead of a Number in Node 6\n    // or later\n    logoutTimer: 'any',\n    lastUserActivityDate: 'number'\n  },\n\n  @waitForValue('@')\n  determineService(url) {\n    for (const key of Object.keys(this.services)) {\n      const serviceUrl = this.services[key];\n      if (url.startsWith(serviceUrl)) {\n        // \"ServiceUrl\" is 10 characters\n        return Promise.resolve(key.substr(0, key.length - 10));\n      }\n    }\n\n    return Promise.reject(new Error(`${url} does not reflect a known service`));\n  },\n\n  @waitForValue('@')\n  getServiceUrl(service) {\n    return this._getServiceUrl(this.services, service)\n      .then((isServiceUrl) => isServiceUrl || this.getPreDiscoveryServiceUrl(service));\n  },\n\n  getPreDiscoveryServiceUrl(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._getServiceUrl(this.config.preDiscoveryServices, service));\n  },\n\n  getWebSocketUrl() {\n    return this.useServiceCatalogUrl(this.webSocketUrl);\n  },\n\n  useServiceCatalogUrl(uri) {\n    return this.serviceCatalog.inferServiceFromUrl(uri)\n      .then((s) => s.replaceUrlWithCurrentHost(uri));\n  },\n\n  markUrlFailedAndGetNew(url) {\n    if (!url) {\n      return Promise.reject(new Error('`url` is a required parameter'));\n    }\n\n    this.logger.info(`device: marking ${url} as failed`);\n    return this.serviceCatalog.markFailedAndCycleUrl(url)\n      .then((uri) => {\n        this.spark.internal.metrics.submitClientMetrics('web-ha', {\n          tags: {\n            action: 'replace_url',\n            failedUrl: url,\n            newUrl: uri\n          }\n        });\n        return uri;\n      })\n      // it's likely we fail here because we've cycled though all hosts,\n      // now we rely on wdm service to return new available datacenters\n      .catch(() => this._fetchNewUrls(url));\n  },\n\n  _fetchNewUrls(url) {\n    // we want to get the current service first, just in case the\n    // refreshed catalog has different host names\n    return new Promise((resolve) => this.serviceCatalog.inferServiceFromUrl(url)\n      .then((s) => {\n        this.logger.info(`device: refresh to ${s.service} get new urls`);\n        this.refresh();\n        this.on('serviceCatalogUpdated', () => resolve(s.url));\n      }));\n  },\n\n  @persist('@', decider)\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    // Propagate change(:[attribute]) events from collections\n    ['developer', 'entitlement', 'user'].forEach((collectionName) => {\n      this.features.on(`change:${collectionName}`, (model, value, options) => {\n        this.trigger('change', this, options);\n        this.trigger('change:features', this, this.features, options);\n      });\n    });\n\n    this.on('change:serviceHostMap', this._updateServiceCatalog);\n\n    this.listenToAndRun(this, 'change:intranetInactivityCheckUrl', () => this._resetLogoutTimer());\n    this.listenToAndRun(this, 'change:intranetInactivityDuration', () => this._resetLogoutTimer());\n    this.listenTo(this.spark, 'user-activity', () => { this.lastUserActivityDate = Date.now(); });\n  },\n\n  /**\n   * Don't log the features object\n   * @param {number} depth\n   * @returns {Object}\n   */\n  inspect(depth) {\n    return util.inspect(omit(this.serialize(), 'features'), {depth});\n  },\n\n  isPreDiscoveryService(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isService(this.config.preDiscoveryServices, service));\n  },\n\n  isPreDiscoveryServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.config.preDiscoveryServices, uri));\n  },\n\n  @waitForValue('@')\n  isService(service) {\n    return this._isService(this.services, service)\n      .then((_isService) => _isService || this.isPreDiscoveryService(service));\n  },\n\n  @waitForValue('@')\n  isServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.services, uri));\n  },\n\n  @waitForValue('@')\n  isSpecificService(service, key) {\n    if (key === service) {\n      return Promise.resolve(true);\n    }\n\n    return this.getServiceUrl(service)\n      .then((serviceUrl) => key.includes(serviceUrl));\n  },\n\n  _getServiceUrl(target, service) {\n    /* istanbul ignore if */\n    if (!target) {\n      return Promise.reject(new Error('`target` is a required parameter'));\n    }\n\n    if (!service) {\n      return Promise.reject(new Error('`service` is a required parameter'));\n    }\n\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      const s = this.serviceCatalog.get(`${service}ServiceUrl`);\n      if (s) {\n        return Promise.resolve(s.url);\n      }\n    }\n\n    return Promise.resolve(target[`${service}ServiceUrl`]);\n  },\n\n  _isService(target, service) {\n    return this._getServiceUrl(target, service)\n      .then((url) => Boolean(url));\n  },\n\n  _isServiceUrl(target, uri) {\n    if (!uri) {\n      return Promise.reject(new Error('`uri` is a required parameter'));\n    }\n\n    for (const value of Object.values(target)) {\n      if (value && uri.startsWith(value)) {\n        return Promise.resolve(true);\n      }\n    }\n\n    return Promise.resolve(false);\n  },\n\n  @oneFlight\n  @waitForValue('@')\n  refresh() {\n    this.logger.info('device: refreshing');\n\n    if (!this.registered) {\n      this.logger.info('device: device not registered, registering');\n      return this.register();\n    }\n\n    const body = omit(this.serialize(), 'features', 'mediaClusters');\n    if (this.config.ephemeral) {\n      body.ttl = this.config.ephemeralDeviceTTL;\n    }\n\n    return this.request({\n      method: 'PUT',\n      uri: this.url,\n      body\n    })\n      .then((res) => this._processRegistrationSuccess(res))\n      .catch((reason) => {\n        if (reason.statusCode === 404) {\n          // If we get a 404, it means the device is no longer valid and we need\n          // to register a new one.\n          this.logger.info('device: refresh failed with 404, attempting to register new device');\n          this.clear();\n          return this.register();\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  @oneFlight\n  @waitForValue('@')\n  register() {\n    /* eslint no-invalid-this: [0] */\n    this.logger.info('device: registering');\n\n    if (this.registered) {\n      this.logger.info('device: device already registered, refreshing');\n      return this.refresh();\n    }\n\n    const body = this.config.defaults;\n    if (this.config.ephemeral) {\n      body.ttl = this.config.ephemeralDeviceTTL;\n    }\n\n    return this.request({\n      method: 'POST',\n      service: 'wdm',\n      resource: 'devices',\n      body\n    })\n      .then((res) => this._processRegistrationSuccess(res));\n  },\n\n  @oneFlight\n  @waitForValue('@')\n  unregister() {\n    this.logger.info('device: unregistering');\n\n    if (!this.url) {\n      this.logger.warn('device: not registered');\n      return Promise.resolve();\n    }\n\n    return this.request({\n      uri: this.url,\n      method: 'DELETE'\n    })\n      .then(() => this.clear());\n  },\n\n  clear(...args) {\n    clearTimeout(this.refreshTimer);\n    Reflect.apply(SparkPlugin.prototype.clear, this, args);\n  },\n\n  _processRegistrationSuccess(res) {\n    this.logger.info('device: received registration payload');\n    this.set(res.body);\n    if (this.config.ephemeral) {\n      this.logger.info('device: enqueing device refresh');\n      const delay = (this.config.ephemeralDeviceTTL / 2 + 60) * 1000;\n      this.refreshTimer = safeSetTimeout(() => this.refresh(), delay);\n    }\n  },\n\n  _updateServiceCatalog(newRegistration) {\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      if (newRegistration.serviceHostMap && newRegistration.serviceHostMap.hostCatalog) {\n        Object.keys(newRegistration.services).forEach((service) => {\n          const uri = newRegistration.services[service];\n          const u = Url.parse(uri);\n          const hosts = newRegistration.serviceHostMap.hostCatalog[u.host];\n          this.serviceCatalog.set({\n            service,\n            defaultUrl: uri,\n            availableHosts: hosts || []\n          }, {remove: false});\n        });\n        this.trigger('serviceCatalogUpdated');\n      }\n      else {\n        // if user has old device in localStorage, refresh device\n        this.refresh();\n      }\n    }\n  },\n\n  _resetLogoutTimer() {\n    clearTimeout(this.logoutTimer);\n    this.unset('logoutTimer');\n    if (this.config.enableInactivityEnforcement && this.intranetInactivityCheckUrl && this.intranetInactivityDuration) {\n      this.once('change:lastUserActivityDate', () => this._resetLogoutTimer());\n\n      const timer = safeSetTimeout(() => {\n        this.spark.request({\n          headers: {\n            'cisco-no-http-redirect': null,\n            'spark-user-agent': null,\n            trackingid: null\n          },\n          method: 'GET',\n          uri: this.intranetInactivityCheckUrl\n        })\n          .catch(() => {\n            this.logger.info('device: did not reach internal ping endpoint; logging out after inactivity on a public network');\n            return this.spark.logout();\n          })\n          .catch((reason) => {\n            this.logger.warn('device: logout failed', reason);\n          });\n      }, this.intranetInactivityDuration * 1000);\n\n      this.logoutTimer = timer;\n    }\n  }\n});\n\nexport default Device;\n"]}