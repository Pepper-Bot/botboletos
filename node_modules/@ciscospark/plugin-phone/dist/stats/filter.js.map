{"version":3,"sources":["filter.js"],"names":["StatsFilter","objectMode","report","encoding","callback","incomingAudio","local","remote","incomingVideo","outgoingAudio","outgoingVideo","values","item","type","isRemote","mediaType","get","remoteId","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;IAGqBA,W;;;AACnB;;;;AAIA,yBAAc;AAAA;AAAA,2IACN,EAACC,YAAY,IAAb,EADM;AAEb;;AAED;;;;;;;;;;;;+BAQWC,M,EAAQC,Q,EAAUC,Q,EAAU;AACrC,UAAI,CAACF,MAAL,EAAa;AACXE;AACA;AACD;;AAED,UAAMC,gBAAgB;AACpBC,eAAO,IADa;AAEpBC,gBAAQ;AAFY,OAAtB;AAIA,UAAMC,gBAAgB;AACpBF,eAAO,IADa;AAEpBC,gBAAQ;AAFY,OAAtB;AAIA,UAAME,gBAAgB;AACpBH,eAAO,IADa;AAEpBC,gBAAQ;AAFY,OAAtB;AAIA,UAAMG,gBAAgB;AACpBJ,eAAO,IADa;AAEpBC,gBAAQ;AAFY,OAAtB;;AAlBqC;AAAA;AAAA;;AAAA;AAuBrC,wDAAmBL,OAAOS,MAAP,EAAnB,4GAAoC;AAAA,cAAzBC,IAAyB;;AAClC,cAAIA,KAAKC,IAAL,KAAc,cAAd,IAAgC,CAACD,KAAKE,QAAtC,IAAkDF,KAAKG,SAAL,KAAmB,OAAzE,EAAkF;AAChFN,0BAAcH,KAAd,GAAsBM,IAAtB;AACAH,0BAAcF,MAAd,GAAuBL,OAAOc,GAAP,CAAWJ,KAAKK,QAAhB,CAAvB;AACD;;AAED,cAAIL,KAAKC,IAAL,KAAc,cAAd,IAAgC,CAACD,KAAKE,QAAtC,IAAkDF,KAAKG,SAAL,KAAmB,OAAzE,EAAkF;AAChFL,0BAAcJ,KAAd,GAAsBM,IAAtB;AACAF,0BAAcH,MAAd,GAAuBL,OAAOc,GAAP,CAAWJ,KAAKK,QAAhB,CAAvB;AACD;;AAED,cAAIL,KAAKC,IAAL,KAAc,aAAd,IAA+B,CAACD,KAAKE,QAArC,IAAiDF,KAAKG,SAAL,KAAmB,OAAxE,EAAiF;AAC/EV,0BAAcC,KAAd,GAAsBM,IAAtB;AACAP,0BAAcE,MAAd,GAAuBL,OAAOc,GAAP,CAAWJ,KAAKK,QAAhB,CAAvB;AACD;;AAED,cAAIL,KAAKC,IAAL,KAAc,aAAd,IAA+B,CAACD,KAAKE,QAArC,IAAiDF,KAAKG,SAAL,KAAmB,OAAxE,EAAiF;AAC/EP,0BAAcF,KAAd,GAAsBM,IAAtB;AACAJ,0BAAcD,MAAd,GAAuBL,OAAOc,GAAP,CAAWJ,KAAKK,QAAhB,CAAvB;AACD;AACF;AA3CoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6CrC,WAAKC,IAAL,CAAU;AACRb,oCADQ;AAERG,oCAFQ;AAGRC,oCAHQ;AAIRC;AAJQ,OAAV;;AAOAN;AACD;;;;;kBAtEkBJ,W","file":"filter.js","sourcesContent":["import {Transform} from 'stream';\n\n/**\n * Reforms the interesting data from an RTCStatsReport into something grokkable\n */\nexport default class StatsFilter extends Transform {\n  /**\n   * Tells the Stream we're operating in objectMode\n   * @private\n   */\n  constructor() {\n    super({objectMode: true});\n  }\n\n  /**\n   * Filters out just the interesting part of a RTCStatsReport\n   * @param {RTCStatsReport} report\n   * @param {*} encoding\n   * @param {Function} callback\n   * @private\n   * @returns {undefined}\n   */\n  _transform(report, encoding, callback) {\n    if (!report) {\n      callback();\n      return;\n    }\n\n    const incomingAudio = {\n      local: null,\n      remote: null\n    };\n    const incomingVideo = {\n      local: null,\n      remote: null\n    };\n    const outgoingAudio = {\n      local: null,\n      remote: null\n    };\n    const outgoingVideo = {\n      local: null,\n      remote: null\n    };\n\n    for (const item of report.values()) {\n      if (item.type === 'outbound-rtp' && !item.isRemote && item.mediaType === 'audio') {\n        outgoingAudio.local = item;\n        outgoingAudio.remote = report.get(item.remoteId);\n      }\n\n      if (item.type === 'outbound-rtp' && !item.isRemote && item.mediaType === 'video') {\n        outgoingVideo.local = item;\n        outgoingVideo.remote = report.get(item.remoteId);\n      }\n\n      if (item.type === 'inbound-rtp' && !item.isRemote && item.mediaType === 'audio') {\n        incomingAudio.local = item;\n        incomingAudio.remote = report.get(item.remoteId);\n      }\n\n      if (item.type === 'inbound-rtp' && !item.isRemote && item.mediaType === 'video') {\n        incomingVideo.local = item;\n        incomingVideo.remote = report.get(item.remoteId);\n      }\n    }\n\n    this.push({\n      incomingAudio,\n      incomingVideo,\n      outgoingAudio,\n      outgoingVideo\n    });\n\n    callback();\n  }\n}\n"]}