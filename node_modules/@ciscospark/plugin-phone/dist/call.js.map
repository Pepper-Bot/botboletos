{"version":3,"sources":["call.js"],"names":["deprecatedCallEventNames","getMediaDirectionFromSDP","kind","sdp","parsed","media","find","m","type","content","direction","reverseMediaDirection","dir","Error","didChange","offer","answer","o","a","includes","capitalize","audio","video","Call","extend","namespace","children","collections","memberships","session","activeParticipantsCount","default","required","remoteAudioMuted","remoteVideoMuted","correlationId","facingMode","values","internalCallId","setOnce","locus","localMediaStream","locusJoinInFlight","locusLeaveInFlight","me","derived","id","deps","fn","isActive","joinedOnThisDevice","spark","locusUrl","device","mediaConnection","mediaId","remoteMember","isSelf","undefined","from","isCall","isInitiator","to","state","config","enableExperimentalGroupCallingSupport","status","previousAttributes","remoteMediaStream","localScreenShare","receivingAudio","receivingVideo","sendingAudio","sendingVideo","supportsDtmf","acknowledge","logger","info","internal","alert","then","setLocus","options","resolve","pc","remoteDescription","createOrJoinLocus","changeReceivingMedia","value","offerSdp","section","once","updateMuteToggles","newDirection","setMedia","changeSendingMedia","cleanup","process","nextTick","stop","stopListening","mercury","off","target","constraints","ideal","phone","defaultFacingMode","mode","recvOnly","offerOptions","offerToReceiveAudio","offerToReceiveVideo","fake","v4","bandwidthLimit","audioBandwidthLimit","videoBandwidthLimit","createOffer","createOrJoin","localSdp","JSON","parse","remoteSdp","signalingState","ended","acceptAnswer","catch","err","error","reject","decline","dial","invitee","validate","decode","split","resourceType","url","services","conversationServiceUrl","connect","reason","trigger","getRawStatsStream","getStatsStream","pipe","hangup","when","leave","initialize","initArgs","prototype","on","onChangeActiveParticipantsCount","onChangeIsActive","onChangeLocalMediaStream","onChangeRemoteMember","forEach","key","listenTo","args","onMembershipsAudioMuted","onMembershipsChangeState","onMembershipsVideoMuted","event","onLocusEvent","onMediaNegotiationNeeded","listenToAndRun","participants","set","eventName","rest","stack","toString","devices","item","data","eventType","replaces","replaced","lastActive","audioMuted","videoMuted","model","filter","length","updateMedia","pollForExpectedLocusAndSdp","emit","track","getTracks","t","enabled","hangupIfLastActive","call","meeting","previousLocus","audioOfferDir","videoOfferDir","screenOfferDir","self","count","isExpectedDirection","validateLocusMediaState","setTimeout","sync","audioAnswerDir","videoAnswerDir","screenAnswerDir","expectedAudioAnswerDir","expectedVideoAnswerDir","expectedScreenAnswerDir","releaseFloor","mediaShare","releaseFloorGrant","requestFloor","requestFloorGrant","incoming","recursing","current","action","compare","merge","get","sendDtmf","tones","sendFeedback","feedback","metrics","submit","startApplicationShare","mediaSource","startScreenShare","startReceivingAudio","startReceivingVideo","startSendingAudio","startSendingVideo","stopScreenShare","stopReceivingAudio","stopReceivingVideo","stopSendingAudio","stopSendingVideo","toggleFacingMode","constraint","toggleReceivingAudio","toggleReceivingVideo","toggleSendingAudio","toggleSendingVideo","payload","answerSdp","waitForExpectedLocus","locusAudio","audioStatus","toLowerCase","mediaAudio","audioDirection","warn","locusVideo","videoStatus","mediaVideo","videoDirection","listener","make","attrs"],"mappings":"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","file":"call.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser: true */\n\nimport {defaults, find, get, wrap} from 'lodash';\nimport {debounce} from 'lodash-decorators';\nimport {parse} from 'sdp-transform';\nimport uuid from 'uuid';\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {\n  base64,\n  deprecated,\n  oneFlight,\n  retry,\n  tap,\n  whileInFlight\n} from '@ciscospark/common';\nimport {\n  USE_INCOMING,\n  FETCH\n} from '@ciscospark/internal-plugin-locus';\nimport WebRTCMediaEngine from '@ciscospark/media-engine-webrtc';\n\nimport {\n  waitForMediaShare,\n  getState,\n  getStatus,\n  getThisDevice,\n  isCall,\n  activeParticipants,\n  direction,\n  isActive,\n  joinedOnThisDevice,\n  makeInternalCallId,\n  participantsToCallMemberships\n} from './state-parsers';\nimport boolToStatus from './bool-to-status';\nimport CallMemberships from './call-memberships';\nimport StatsFilter from './stats/filter';\nimport StatsStream from './stats/stream';\n\nconst deprecatedCallEventNames = [\n  'ringing',\n  'connected',\n  'disconnected',\n  'replaced'\n];\n\n/**\n * Pulls the direction line for the specified media kind from an sdp\n * @param {string} kind\n * @param {string} sdp\n * @private\n * @returns {string}\n */\nfunction getMediaDirectionFromSDP(kind, sdp) {\n  const parsed = typeof sdp === 'string' ? parse(sdp) : sdp;\n\n  let media;\n  if (kind === 'screen') {\n    media = parsed.media.find((m) => m.type === 'video' && m.content);\n  }\n  else {\n    media = parsed.media.find((m) => m.type === kind);\n  }\n  if (!media || !media.direction) {\n    return 'inactive';\n  }\n\n  return media.direction;\n}\n\n/**\n * Reverses a media direction from offer to answer (e.g. sendonly -> recvonly)\n * @param {string} dir\n * @private\n * @returns {string}\n */\nfunction reverseMediaDirection(dir) {\n  switch (dir) {\n    case 'inactive':\n    case 'sendrecv':\n      return dir;\n    case 'sendonly':\n      return 'recvonly';\n    case 'recvonly':\n      return 'sendonly';\n    default:\n      throw new Error(`direction \"${dir}\" is not valid`);\n  }\n}\n\n/**\n * Helper for detmerming what mute value toggles to send to locus.\n * @private\n *\n * @param {string} kind\n * @param {string} offer\n * @param {string} answer\n * @returns {boolean}\n */\nfunction didChange(kind, offer, answer) {\n  const o = parse(offer).media.find((m) => m.type === kind);\n  const a = parse(answer).media.find((m) => m.type === kind);\n\n  if (!o && !a) {\n    return false;\n  }\n\n  if (!o && a.direction.includes('send')) {\n    return true;\n  }\n\n  if (!a && o.direction.includes('send')) {\n    return true;\n  }\n\n  if (o.direction === a.direction) {\n    return false;\n  }\n\n  if (o.direction.includes('send') && a.direction.includes('send') || !o.direction.includes('send') && !a.direction.includes('send')) {\n    return false;\n  }\n  return true;\n}\n\nconst capitalize = {\n  audio: 'Audio',\n  video: 'Video'\n};\n\n/**\n * @event ringing\n * @instance\n * @memberof Call\n * @deprecated with {@link PhoneConfig.enableExperimentalGroupCallingSupport}\n * enabled; instead, listen for {@link Call.membership:notified}\n */\n\n/**\n * @event connected\n * @instance\n * @memberof Call\n * @deprecated with {@link PhoneConfig.enableExperimentalGroupCallingSupport}\n * enabled; instead, listen for {@link Call.active}\n */\n\n/**\n * @event disconnected\n * @instance\n * @memberof Call\n * @deprecated with {@link PhoneConfig.enableExperimentalGroupCallingSupport}\n * enabled; instead, listen for {@link Call.inactive}\n */\n\n/**\n * @event active\n * @instance\n * @memberof Call\n * @description only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event initializing\n * @instance\n * @memberof Call\n * @description only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event inactive\n * @instance\n * @memberof Call\n * @description only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event terminating\n * @instance\n * @memberof Call\n * @description only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event localMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event remoteMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event error\n * @instance\n * @memberof Call\n */\n\n/**\n * @event membership:notified\n * @instance\n * @memberof Call\n * @type {CallMembership}\n * @description This replaces the {@link Call.ringing} event, but note that it's\n * subtly different. {@link Call.ringing} is emitted when the remote party calls\n * {@link Call#acknowledge()} whereas {@link Call.membership:notified} emits\n * shortly after (but as a direct result of) locally calling\n * {@link Phone#dial()}\n */\n\n/**\n * @event membership:connected\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:declined\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:disconnected\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:waiting\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:change\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event memberships:add\n * @instance\n * @memberof Call\n * @description Emitted when a new {@link CallMembership} is added to\n * {@link Call#memberships}. Note that {@link CallMembership#state} still needs\n * to be read to determine if the instance represents someone actively\n * participating the call.\n */\n\n/**\n * @event memberships:remove\n * @instance\n * @memberof Call\n * @description Emitted when a {@link CallMembership} is removed from\n * {@link Call#memberships}.\n */\n\n/**\n * Payload for {@link Call#sendFeedback}\n * @typedef {Object} FeedbackObject\n * @property {number} userRating Number between 1 and 5 (5 being best) to let\n * the user score the call\n * @property {string} userComments Freeform feedback from the user about the\n * call\n * @property {Boolean} includeLogs set to true to submit client logs to the\n * Cisco Spark cloud. Note: at this time, all logs, not just call logs,\n * generated by the sdk will be uploaded to the Spark Cloud. Care has been taken\n * to avoid including PII in these logs, but if you've taken advantage of the\n * SDK's logger, you should make sure to avoid logging PII as well.\n */\n\n/**\n * @class\n */\nconst Call = SparkPlugin.extend({\n  namespace: 'Phone',\n\n  children: {\n    media: WebRTCMediaEngine\n  },\n\n  collections: {\n    /**\n     * @instance\n     * @memberof Call\n     * @type CallMemberships\n     */\n    memberships: CallMemberships\n  },\n\n  session: {\n    activeParticipantsCount: {\n      default: 0,\n      required: true,\n      type: 'number'\n    },\n    /**\n     * Indicates if the other party in the call has turned off their microphone.\n     * `undefined` for multiparty calls\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {boolean}\n     */\n    remoteAudioMuted: {\n      default: false,\n      required: false,\n      type: 'boolean'\n    },\n\n    /**\n     * Indicates if the other party in the call has turned off their camera.\n     * `undefined` for multiparty calls\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {boolean}\n     */\n    remoteVideoMuted: {\n      default: false,\n      required: false,\n      type: 'boolean'\n    },\n\n    correlationId: 'string',\n    /**\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {string}\n     */\n    facingMode: {\n      type: 'string',\n      values: ['user', 'environment']\n    },\n    /**\n     * Derived from locus.id and locus.fullState.lastActive. Not actually a\n     * \"derived\" property because it shouldn't be reset in event a locus\n     * replacement. Marked as private because this isn't necessarily the callId\n     * that we'll eventually expose as a first-class feature.\n     * @instance\n     * @memberof Call\n     * @private\n     * @readonly\n     * @type {string}\n     */\n    internalCallId: {\n      setOnce: true,\n      type: 'string'\n    },\n    locus: 'object',\n    /**\n     * Returns the local MediaStream for the call. May initially be `null`\n     * between the time @{Phone#dial is invoked and the  media stream is\n     * acquired if {@link Phone#dial} is invoked without a `localMediaStream`\n     * option.\n     *\n     * This property can also be set mid-call in which case the streams sent to\n     * the remote party are replaced by this stream. On success, the\n     * {@link Call}'s {@link localMediaStream:change} event fires, notifying any\n     * listeners that we are now sending media from a new source.\n     * @instance\n     * @memberof Call\n     * @type {MediaStream}\n     */\n    localMediaStream: 'object',\n\n    locusJoinInFlight: {\n      default: false,\n      type: 'boolean'\n    },\n    locusLeaveInFlight: {\n      default: false,\n      type: 'boolean'\n    },\n    /**\n     * Test helper. Shortcut to the current user's membership object. not\n     * official for now, but may get published at some point\n     * @instance\n     * @memberof Call\n     * @private\n     * @type {CallMembership}\n     */\n    me: {\n      type: 'object'\n    }\n  },\n\n  // Note, in its current form, any derived property that is an object will emit\n  // a change event everytime a locus gets replaced, even if no values change.\n  // For the moment, this is probably ok; once we have multi-party, regular\n  // change events on activeParticipants may be a problem.\n  derived: {\n    id: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return get(this, 'locus.url');\n      }\n    },\n    isActive: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return !!(this.locus && isActive(this.locus));\n      }\n    },\n    joinedOnThisDevice: {\n      deps: ['locus'],\n      default: false,\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return !!(this.locus && joinedOnThisDevice(this.spark, this.locus));\n      }\n    },\n    locusUrl: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return get(this, 'locus.url');\n      }\n    },\n    device: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return getThisDevice(this.spark, this.locus);\n      }\n    },\n    mediaConnection: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        const device = getThisDevice(this.spark, this.locus);\n        return get(device, 'mediaConnections[0]');\n      }\n    },\n    mediaId: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        const device = getThisDevice(this.spark, this.locus);\n        return get(device, 'mediaConnections[0].mediaId');\n      }\n    },\n    /**\n     * The other participant in a two-party call. `undefined` for multiparty\n     * calls\n     * @instance\n     * @memberof Call\n     * @readyonly\n     * @type {CallMembership}\n     */\n    remoteMember: {\n      deps: [\n        'memberships',\n        'locus'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        if (isCall(this.locus)) {\n          return this.memberships.find((m) => !m.isSelf);\n        }\n\n        return undefined;\n      }\n    },\n    direction: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        // This seems brittle, but I can't come up with a better way. The only\n        // way we should have a Call without a locus is if we just initiated a\n        // call but haven't got the response from locus yet.\n        if (!this.locus) {\n          return 'out';\n        }\n        return direction(this.locus);\n      }\n    },\n    from: {\n      deps: [\n        'memberships'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        if (this.isCall) {\n          return this.memberships.find((m) => m.isInitiator);\n        }\n        return undefined;\n      }\n    },\n    to: {\n      deps: [\n        'memberships'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        if (this.isCall) {\n          return this.memberships.find((m) => !m.isInitiator);\n        }\n        return undefined;\n      }\n    },\n    /**\n     * <b>active</b> - At least one person (not necessarily this user) is\n     * participating in the call<br/>\n     * <b>inactive</b> - No one is participating in the call<br/>\n     * <b>initializing</b> - reserved for future use<br/>\n     * <b>terminating</b> - reserved for future use<br/>\n     * Only defined if\n     * {@link PhoneConfig.enableExperimentalGroupCallingSupport} has been\n     * enabled\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    state: {\n      deps: [\n        'locus'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        if (this.config.enableExperimentalGroupCallingSupport) {\n          return getState(this.locus);\n        }\n\n        return undefined;\n      }\n    },\n    /**\n     * <b>initiated</b> - Offer was sent to remote party but they have not yet\n     * accepted <br>\n     * <b>ringing</b> - Remote party has acknowledged the call <br>\n     * <b>connected</b> - At least one party is still on the call <br>\n     * <b>disconnected</b> - All parties have dropped <br>\n     * <b>replaced</b> - In (hopefully) rare cases, the underlying data backing\n     * a Call instance may change in such a way that further interaction with\n     * that Call is handled by a different instance. In such cases, the first\n     * Call's status, will transition to `replaced`, which is almost the same\n     * state as `disconnected`. Generally speaking, such a transition should not\n     * happen for a Call instance that is actively sending/receiving media.\n     * @deprecated The {@link Call#status} attribute will likely be replaced by\n     * the {@link Call#state}.\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    status: {\n      deps: [\n        'locus'\n      ],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return getStatus(this.spark, this.locus, this.previousAttributes().locus);\n      }\n    },\n    /**\n     * Access to the remote party’s `MediaStream`.\n     * @instance\n     * @memberof Call\n     * @member {MediaStream}\n     * @readonly\n     */\n    remoteMediaStream: {\n      deps: ['media.remoteMediaStream'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.remoteMediaStream;\n      }\n    },\n    /**\n     * Access to the local party’s screen share `MediaStream`.\n     * @instance\n     * @memberof Call\n     * @member {MediaStream}\n     * @readonly\n     */\n    localScreenShare: {\n      deps: ['media.localScreenShare'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.localScreenShare;\n      }\n    },\n    receivingAudio: {\n      deps: ['media.receivingAudio'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.receivingAudio;\n      }\n    },\n    receivingVideo: {\n      deps: ['media.receivingVideo'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.receivingVideo;\n      }\n    },\n    sendingAudio: {\n      deps: ['media.sendingAudio'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.sendingAudio;\n      }\n    },\n    sendingVideo: {\n      deps: ['media.sendingVideo'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return this.media.sendingVideo;\n      }\n    },\n    isCall: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return isCall(this.locus);\n      }\n    },\n    supportsDtmf: {\n      deps: ['locus'],\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      fn() {\n        return get(this, 'locus.self.enableDTMF');\n      }\n    }\n  },\n\n  @oneFlight\n  /**\n   * Use to acknowledge (without answering) an incoming call. Will cause the\n   * initiator's Call instance to emit the ringing event.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  acknowledge() {\n    this.logger.info('call: acknowledging');\n    return this.spark.internal.locus.alert(this.locus)\n      .then((locus) => this.setLocus(locus))\n      .then(tap(() => this.logger.info('call: acknowledged')));\n  },\n\n  @oneFlight\n  @whileInFlight('locusJoinInFlight')\n  // Note: the `whileInFlight` decorator screws up name inferrence, so we need\n  // to include @name below.\n  /**\n   * Answers an incoming call.\n   * @instance\n   * @name answer\n   * @memberof Call\n   * @param {Object} options\n   * @param {MediaStreamConstraints} options.constraints\n   * @returns {Promise}\n   */\n  answer(options) {\n    this.logger.info('call: answering');\n    if (!this.locus) {\n      this.logger.info('call: no locus provided, answer() is a noop');\n      return Promise.resolve();\n    }\n    // Locus may think we're joined on this device if we e.g. reload the page,\n    // so, we need to check if we also have a working peer connection\n    // this.media.pc.remoteDescription.sdp is a temporary proxy for\n    // pc.connectionState until chrome catches up to the spec\n    if (this.joinedOnThisDevice && this.media.pc.remoteDescription && this.media.pc.remoteDescription.sdp) {\n      this.logger.info('call: already joined on this device');\n      return Promise.resolve();\n    }\n    return this.createOrJoinLocus(this.locus, options)\n      .then(tap(() => this.logger.info('call: answered')));\n  },\n\n  /**\n   * Change the receiving media state. may induce a renegoatiation\n   * @instance\n   * @memberof Call\n   * @param {string} kind one of \"audio\" or \"video\"\n   * @param {boolean} value\n   * @private\n   * @returns {Promise}\n   */\n  changeReceivingMedia(kind, value) {\n    return new Promise((resolve) => {\n      const sdp = parse(this.media.offerSdp);\n      const section = find(sdp.media, {type: kind});\n      // If the current offer is going to trigger a renegotiation, then we don't\n      // need to renegotiate here.\n      if (!section || !section.direction.includes('recv')) {\n        this.logger.info('changeReceivingMedia: expecting to renegotiate, waiting for media to emit \"answeraccepted\"');\n        this.media.once('answeraccepted', () => resolve(this.updateMuteToggles()));\n      }\n      else {\n        this.logger.info(`changeReceivingMedia: expecting to renegotiate, waiting for call to emit \"change:receiving${capitalize[kind]}\"`);\n        this.once(`change:receiving${capitalize[kind]}`, () => resolve());\n      }\n\n      const newDirection = boolToStatus(this.media[`sending${capitalize[kind]}`], value);\n      this.media.setMedia(kind, newDirection);\n    });\n  },\n\n  /**\n   * Change the receiving media state. may induce a renegoatiation\n   * @instance\n   * @memberof Call\n   * @param {string} kind one of \"audio\" or \"video\"\n   * @param {boolean} value\n   * @private\n   * @returns {Promise}\n   */\n  changeSendingMedia(kind, value) {\n    this.logger.info(`changeSendingMedia: changing sending \"${kind}\" to \"${value}\"`);\n    return new Promise((resolve) => {\n      const sdp = parse(this.media.offerSdp);\n      const section = find(sdp.media, {type: kind});\n      // If the current offer is going to trigger a renegotiation, then we don't\n      // need to renegotiate here.\n      if (!section || !section.direction.includes('send')) {\n        this.logger.info('changeSendingMedia: expecting to renegotiate, waiting for media to emit \"answeraccepted\"');\n        this.media.once('answeraccepted', () => resolve());\n      }\n      else {\n        this.logger.info(`changeSendingMedia: expecting to renegotiate, waiting for call to emit \"change:sending${capitalize[kind]}\"`);\n        this.once(`change:sending${capitalize[kind]}`, () => resolve(this.updateMuteToggles()));\n      }\n\n      const newDirection = boolToStatus(value, this.media[`receiving${capitalize[kind]}`]);\n      this.media.setMedia(kind, newDirection);\n    });\n  },\n\n  /**\n   * Does the cleanup after a call has ended\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  cleanup() {\n    return new Promise((resolve) => {\n      // need to do this on next tick otherwise this.off() prevents remaining\n      // events from being received (e.g. other listeners for `disconnected`\n      // won't execute)\n      process.nextTick(() => {\n        this.media.stop();\n        this.stopListening(this.spark.internal.mercury);\n        this.off();\n        resolve();\n      });\n    });\n  },\n\n  // The complexity in createOrJoinLocus is largely driven up by fairly readable `||`s\n  /* eslint-disable complexity */\n  @oneFlight\n  /**\n   * Call and answer require nearly identical logic, so this method unifies them.\n   * @instance\n   * @memberof Call\n   * @param {Object|locus} target\n   * @param {Object} options\n   * @todo remove 'locusMethodName' and move that logic to locus plugin\n   * @todo move options and target processing to separate function\n   * @todo rename to join()?\n   * @returns {Promise}\n   */\n  createOrJoinLocus(target, options = {}) {\n    if (options.localMediaStream) {\n      this.localMediaStream = options.localMediaStream;\n    }\n    else {\n      if (!options.constraints) {\n        options.constraints = {\n          audio: true,\n          video: {\n            facingMode: {\n              ideal: this.spark.phone.defaultFacingMode\n            }\n          }\n        };\n      }\n\n      const mode = get(options, 'constraints.video.facingMode.ideal', get(options, 'constraints.video.facingMode.exact'));\n      if (mode === 'user' || mode === 'environment') {\n        this.facingMode = mode;\n      }\n\n      const recvOnly = !options.constraints.audio && !options.constraints.video;\n      options.offerOptions = defaults(options.offerOptions, {\n        offerToReceiveAudio: recvOnly || !!options.constraints.audio,\n        offerToReceiveVideo: recvOnly || !!options.constraints.video\n      });\n\n      if (options.constraints.fake) {\n        this.media.constraints.fake = true;\n      }\n\n      this.media.setMedia('audio', boolToStatus(options.constraints.audio, options.offerOptions.offerToReceiveAudio), options.constraints.audio);\n      if (get(options, 'constraints.video.mediaSource') === 'screen' || get(options, 'constraints.video.mediaSource') === 'application') {\n        this.media.setMedia('screen', 'sendonly');\n      }\n      else {\n        this.media.setMedia('video', boolToStatus(options.constraints.video, options.offerOptions.offerToReceiveVideo), options.constraints.video);\n      }\n    }\n\n    if (!target.correlationId) {\n      options.correlationId = uuid.v4();\n      this.correlationId = options.correlationId;\n    }\n\n    if (!this.correlationId) {\n      this.correlationId = target.correlationId;\n    }\n\n    // reminder: not doing this copy in initialize() because config may not yet\n    // be available\n    this.media.bandwidthLimit = {\n      audioBandwidthLimit: this.config.audioBandwidthLimit,\n      videoBandwidthLimit: this.config.videoBandwidthLimit\n    };\n\n    return this.media.createOffer()\n      .then(tap(() => this.logger.info('created offer')))\n      .then(() => this.spark.internal.locus.createOrJoin(target, Object.assign({\n        localSdp: this.media.offerSdp,\n        correlationId: this.correlationId\n      }, options)))\n      .then(tap(() => this.logger.info('sent offer to locus')))\n      .then(tap(() => this.logger.info('setting locus')))\n      .then((locus) => this.setLocus(locus))\n      .then(tap(() => this.logger.info('successfully set locus')))\n      .then(() => {\n        const answer = JSON.parse(this.mediaConnection.remoteSdp).sdp;\n        this.logger.info('accepting answer');\n        this.logger.info('peer state', this.media.pc && this.media.pc.signalingState);\n        if (!this.media.ended) {\n          return this.media.acceptAnswer(answer)\n            .then(() => this.logger.info('answer accepted'))\n            .catch((err) => {\n              this.logger.error('failed to accept answer', err);\n              return Promise.reject(err);\n            });\n        }\n        this.logger.info('call: already ended, not accepting answer');\n        return Promise.resolve();\n      });\n  },\n  /* eslint-enable complexity */\n\n  @deprecated('Please use Call#reject()')\n  /**\n   * Alias of {@link Call#reject}\n   * @see {@link Call#reject}\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  decline() {\n    return this.reject();\n  },\n\n  @oneFlight\n  /**\n   * Used by {@link Phone#dial} to initiate an outbound call\n   * @instance\n   * @memberof Call\n   * @param {[type]} invitee\n   * @param {[type]} options\n   * @private\n   * @returns {[type]}\n   */\n  dial(invitee, options) {\n    this.locusJoinInFlight = true;\n    this.logger.info('call: dialing');\n\n    let target = invitee;\n\n    if (base64.validate(invitee)) {\n      // eslint-disable-next-line no-unused-vars\n      const parsed = base64.decode(invitee).split('/');\n      const resourceType = parsed[3];\n      const id = parsed[4];\n      if (resourceType === 'PEOPLE') {\n        target = id;\n      }\n\n      if (resourceType === 'ROOM') {\n        if (!get(this, 'config.enableExperimentalGroupCallingSupport')) {\n          throw new Error('Group calling is not enabled. Please enable config.phone.enableExperimentalGroupCallingSupport');\n        }\n\n        target = {\n          url: `${this.spark.internal.device.services.conversationServiceUrl}/conversations/${id}/locus`\n        };\n      }\n    }\n\n    // Note: mercury.connect() will call device.register() if needed. We're not\n    // using phone.register() here because it guarantees a device refresh, which\n    // is probably unnecessary.\n    this.spark.internal.mercury.connect()\n      .then(() => this.createOrJoinLocus(target, options))\n      .then(tap(() => this.logger.info('call: dialed')))\n      .catch((reason) => {\n        this.trigger('error', reason);\n      })\n      .then(() => {\n        this.locusJoinInFlight = false;\n      });\n\n    return this;\n  },\n\n  /**\n   * Returns a {@link Readable} that emits {@link Call#media.pc}'s\n   * {@link RTCStatsReport} every second.\n   * @instance\n   * @memberof Call\n   * @returns {StatsStream}\n   */\n  getRawStatsStream() {\n    return new StatsStream(this.media.pc);\n  },\n\n  /**\n   * Returns a {@link StatsStream} piped through a {@link StatsFilter}\n   * @instance\n   * @memberof Call\n   * @returns {Readable}\n   */\n  getStatsStream() {\n    return this.getRawStatsStream()\n      .pipe(new StatsFilter());\n  },\n\n  /**\n   * Disconnects the active call. Applies to both incoming and outgoing calls.\n   * This method may be invoked in any call state and the SDK should take care\n   * to tear down the call and free up all resources regardless of the state.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  hangup() {\n    // Note: not a @oneFlight because this function must call itself\n    if (this.direction === 'in' && !this.joinedOnThisDevice) {\n      return this.reject();\n    }\n\n    this.logger.info('call: hanging up');\n\n    this.media.stop();\n\n    if (this.locusJoinInFlight) {\n      this.logger.info('call: locus join in flight, waiting for rest call to complete before hanging up');\n      return this.when('change:locusJoinInFlight')\n        .then(() => this.hangup());\n    }\n\n    if (!this.locus) {\n      return this.cleanup()\n        .then(() => this.logger.info('call: hang up complete, call never created'));\n    }\n\n    return this.leave();\n  },\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof Call\n   * @private\n   * @param {Object} attrs\n   * @param {Object} options\n   * @returns {undefined}\n   */\n  initialize(...initArgs) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, initArgs);\n\n    this.on('change:activeParticipantsCount', (...args) => this.onChangeActiveParticipantsCount(...args));\n    // This handler is untested because there's no way to provoke it. It's\n    // probably actually only relevant for group calls.\n    this.on('change:isActive', (...args) => this.onChangeIsActive(...args));\n    this.on('change:localMediaStream', (...args) => this.onChangeLocalMediaStream(...args));\n    // Reminder: this is not a derived property so that we can reassign the\n    // stream midcall\n    this.on('change:media.localMediaStream', () => {\n      this.localMediaStream = this.media.localMediaStream;\n    });\n    this.on('change:remoteMember', (...args) => this.onChangeRemoteMember(...args));\n    [\n      'localMediaStream',\n      'remoteAudioMuted',\n      'remoteMediaStream',\n      'remoteVideoMuted',\n      'localScreenShare'\n    ].forEach((key) => {\n      this.on(`change:${key}`, () => this.trigger(`${key}:change`));\n    });\n    this.on('replaced', () => this.cleanup());\n\n    this.listenTo(this.memberships, 'add', (...args) => this.trigger('memberships:add', ...args));\n    this.listenTo(this.memberships, 'change', (...args) => this.trigger('membership:change', ...args));\n    this.listenTo(this.memberships, 'change:audioMuted', (...args) => this.onMembershipsAudioMuted(...args));\n    this.listenTo(this.memberships, 'change:state', (...args) => this.onMembershipsChangeState(...args));\n    this.listenTo(this.memberships, 'change:videoMuted', (...args) => this.onMembershipsVideoMuted(...args));\n    this.listenTo(this.memberships, 'remove', (...args) => this.trigger('memberships:remove', ...args));\n\n    this.listenTo(this.spark.internal.mercury, 'event:locus', (event) => this.onLocusEvent(event));\n    this.listenTo(this.spark.internal.mercury, 'event:locus.difference', (event) => this.onLocusEvent(event));\n\n    this.listenTo(this.media, 'error', (error) => this.trigger('error', error));\n    this.listenTo(this.media, 'internalTrackUpdate', () => {\n      this.trigger('remoteMediaStream:change');\n    });\n    this.listenTo(this.media, 'negotiationneeded', (...args) => this.onMediaNegotiationNeeded(...args));\n\n    if (this.locus) {\n      this.internalCallId = makeInternalCallId(this.locus);\n    }\n    else {\n      this.once('change:locus', () => {\n        this.internalCallId = makeInternalCallId(this.locus);\n      });\n    }\n\n    this.memberships.listenToAndRun(this, 'change:locus', () => {\n      if (this.locus && this.locus.participants) {\n        // Reminder: we're parsing here instead of CallMembership(s) so that we\n        // can avoid making those classes spark aware and therefore keep them a\n        // lot simpler\n        this.memberships.set(participantsToCallMemberships(this.spark, this.locus));\n        this.me = this.memberships.find((m) => m.isSelf);\n      }\n    });\n\n    if (this.config.enableExperimentalGroupCallingSupport) {\n      this.on('inactive', () => this.hangup());\n      this.on('inactive', () => this.cleanup());\n\n      this.on('change:state', () => {\n        process.nextTick(() => this.trigger(this.state));\n      });\n      this.on = wrap(this.on, (fn, eventName, ...rest) => {\n        if (deprecatedCallEventNames.includes(eventName)) {\n          throw new Error(`The \"${eventName}\" event is no longer valid with \"enableExperimentalGroupCallingSupport===true\"`);\n        }\n\n        return Reflect.apply(fn, this, [eventName, ...rest]);\n      });\n    }\n    else {\n      this.on('disconnected', () => this.hangup());\n      this.on('disconnected', () => this.cleanup());\n\n      this.on('change:status', () => {\n        process.nextTick(() => this.trigger(this.status));\n      });\n    }\n  },\n\n\n  @oneFlight\n  @whileInFlight('locusLeaveInFlight')\n  /**\n   * Does the internal work necessary to end a call while allowing hangup() to\n   * call itself without getting stuck in promise change because of oneFlight\n   * The name of this function is temporary to address the no-underscore-dangle\n   * rule. A future commit in this PR will rename all of the\n   * reject/end/hangup/finish functions to be more meaningful and not just be\n   * synonyms the same word.\n   * @private\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  leave() {\n    this.logger.info('leave: attempting to leave locus');\n    const status = get(this, this.config.enableExperimentalGroupCallingSupport ? 'me.state' : 'status');\n    if (status === 'disconnected') {\n      this.logger.info('already hung up, not calling locus again');\n      return Promise.resolve();\n    }\n\n    if (status === 'declined') {\n      this.logger.info('call was declined, not leaving again');\n      return Promise.resolve();\n    }\n\n    if (status !== 'connected') {\n      this.logger.info('call is neither connected, disconnected, or declined, declining instead of leaving');\n      return this.decline();\n    }\n\n    this.logger.info('leave: leaving locus');\n    return this.spark.internal.locus.leave(this.locus)\n      .catch((err) => {\n        this.logger.error('leave: locus leave error: ', err.stack || err.toString());\n        return Promise.reject(err);\n      })\n      .then(tap(() => this.logger.info(`leave ${this.locus.id}: finished leaving via locus`)))\n      .then(tap(() => this.logger.info(`leave ${this.locus.id}: setting locus`)))\n      .then((locus) => this.setLocus(locus))\n      .then(tap(() => this.logger.info(`leave ${this.locus.id}: finished setting locus`)))\n      // Note: not stopping event-listening here; that'll happening\n      // automatically when `disconnected` fires.\n      .then(tap(() => this.logger.info('call: hung up')));\n  },\n\n  /**\n   * Handles an incoming mercury event if relevant to this call.\n   * @instance\n   * @memberof Call\n   * @param {Types~MercuryEvent} event\n   * @private\n   * @returns {undefined}\n   */\n  onLocusEvent(event) {\n    const devices = get(event, 'data.locus.self.devices');\n    const device = devices && find(devices, (item) => item.url === this.spark.internal.device.url);\n\n    const internalCallId = this.locus && makeInternalCallId(event.data.locus);\n    if (internalCallId === this.internalCallId || device && this.correlationId === device.correlationId) {\n      this.logger.info(`locus event: ${event.data.eventType}`);\n      this.setLocus(event.data.locus);\n    }\n\n\n    if (event.data.locus.replaces) {\n      for (const replaced of event.data.locus.replaces) {\n        if (`${replaced.locusUrl}_${replaced.lastActive}` === this.internalCallId) {\n          this.setLocus(event.data.locus);\n          this.logger.info(`locus replacement event: ${event.data.eventType}`, this.locusUrl, '->', event.data.locus.url);\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onMembershipsAudioMuted() {\n    if (this.remoteMember) {\n      this.remoteAudioMuted = this.remoteMember.audioMuted;\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onMembershipsVideoMuted() {\n    if (this.remoteMember) {\n      this.remoteVideoMuted = this.remoteMember.videoMuted;\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onChangeRemoteMember() {\n    if (this.remoteMember) {\n      this.remoteAudioMuted = this.remoteMember.audioMuted;\n      this.remoteVideoMuted = this.remoteMember.videoMuted;\n    }\n    else {\n      this.remoteAudioMuted = undefined;\n      this.remoteVideoMuted = undefined;\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @param {Membership} model\n   * @private\n   * @returns {undefined}\n   */\n  onMembershipsChangeState(model) {\n    this.activeParticipantsCount = this\n      .memberships\n      .filter((m) => m.state === 'connected')\n      .length;\n\n    this.trigger(`membership:${model.state}`, model);\n  },\n\n  @debounce()\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onMediaNegotiationNeeded() {\n    this.media.createOffer()\n      .then(() => this.updateMedia({\n        sdp: this.media.offerSdp,\n        mediaId: this.mediaId\n      }))\n      .then(() => this.pollForExpectedLocusAndSdp())\n      .then(() => {\n        const {sdp} = JSON.parse(this.mediaConnection.remoteSdp);\n        return this.media.acceptAnswer(sdp);\n      })\n      .catch((reason) => this.emit('error', reason));\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onChangeLocalMediaStream() {\n    if (this.localMediaStream && this.localMediaStream !== this.media.localMediaStream) {\n      [\n        'audio',\n        'video'\n      ]\n        .forEach((kind) => {\n          // eslint-disable-next-line max-nested-callbacks\n          const track = this.localMediaStream.getTracks().find((t) => t.kind === kind);\n          if (track) {\n            this.media.setMedia(kind, boolToStatus(track.enabled, this[`receiving${capitalize[kind]}`]), track);\n          }\n          else {\n            this.media.setMedia(kind, boolToStatus(false, this[`receiving${capitalize[kind]}`]));\n          }\n        });\n      this.localMediaStream = this.media.localMediaStream;\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onChangeIsActive() {\n    if (!this.isActive) {\n      if (this.joinedOnThisDevice) {\n        this.logger.info('call: hanging up due to locus going inactive');\n        this.hangup();\n      }\n    }\n  },\n\n  /**\n   * Event handler\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {undefined}\n   */\n  onChangeActiveParticipantsCount() {\n    if (!this.joinedOnThisDevice) {\n      return;\n    }\n\n    if (this.activeParticipantsCount !== 1) {\n      return;\n    }\n\n    if (this.isCall && !this.config.hangupIfLastActive.call) {\n      return;\n    }\n\n    if (!this.isCall && !this.config.hangupIfLastActive.meeting) {\n      return;\n    }\n\n    const previousLocus = this.previousAttributes().locus;\n    if (!previousLocus) {\n      return;\n    }\n\n    if (activeParticipants(previousLocus).length > 1) {\n      this.logger.info('call: hanging up due to last participant in call');\n      this.hangup();\n    }\n  },\n\n  @retry\n  /**\n   * The response to a PUT to LOCUS/media may not be fully up-to-date when we\n   * receive it. This method polls locus until we get a locus with the status\n   * properties we expect (or three errors occur)\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise<Types~Locus>}\n   */\n  pollForExpectedLocusAndSdp() {\n    return new Promise((resolve, reject) => {\n      const offer = parse(this.media.offerSdp);\n\n      const audioOfferDir = getMediaDirectionFromSDP('audio', offer);\n      const videoOfferDir = getMediaDirectionFromSDP('video', offer);\n      const screenOfferDir = getMediaDirectionFromSDP('screen', offer);\n\n      const self = this;\n      let count = 0;\n      const validate = () => {\n        count += 1;\n        try {\n          this.logger.info(`iteration ${count}: checking if current locus has the expected audio and video directions`);\n          if (isExpectedDirection(JSON.parse(this.mediaConnection.remoteSdp).sdp)) {\n            this.logger.info(`iteration ${count}: the current locus sdp has the expected audio and video directions`);\n            try {\n              this.validateLocusMediaState(this.locus);\n              this.logger.info(`iteration ${count}: the current locus has the expected audio and video directions; not syncing`);\n              resolve();\n              return;\n            }\n            catch (err) {\n              this.logger.info(`iteration ${count}: the current locus does not have the expected audio and video directions; syncing`);\n            }\n          }\n          else {\n            this.logger.info(`iteration ${count}: the current locus sdp does not have the expected audio and video directions; syncing`);\n          }\n\n          if (count > 4) {\n            reject(new Error(`After ${count} attempts polling locus`));\n            return;\n          }\n\n          setTimeout(() => this.spark.internal.locus.sync(this.locus)\n            .then((locus) => this.setLocus(locus))\n            .then(validate)\n            .catch(reject), 1000 * (2 ** count));\n        }\n        catch (err) {\n          reject(err);\n        }\n      };\n\n      validate();\n      /**\n       * Determine if the incoming sdp has the expected media directions\n       * @private\n       * @param {string} sdp\n       * @returns {boolean}\n       */\n      function isExpectedDirection(sdp) {\n        const answer = parse(sdp);\n\n        const audioAnswerDir = getMediaDirectionFromSDP('audio', answer);\n        const videoAnswerDir = getMediaDirectionFromSDP('video', answer);\n        const screenAnswerDir = getMediaDirectionFromSDP('screen', answer);\n\n        const expectedAudioAnswerDir = reverseMediaDirection(audioOfferDir);\n        const expectedVideoAnswerDir = reverseMediaDirection(videoOfferDir);\n        const expectedScreenAnswerDir = reverseMediaDirection(screenOfferDir);\n\n        self.logger.info(`audio: ${audioOfferDir}, ${audioAnswerDir}, ${expectedAudioAnswerDir}`);\n        self.logger.info(`video: ${videoOfferDir}, ${videoAnswerDir}, ${expectedVideoAnswerDir}`);\n        self.logger.info(`screen: ${screenOfferDir}, ${screenAnswerDir}, ${expectedScreenAnswerDir}`);\n\n        // eslint-disable-next-line max-len\n        return audioAnswerDir === expectedAudioAnswerDir && videoAnswerDir === expectedVideoAnswerDir && screenAnswerDir === expectedScreenAnswerDir;\n      }\n    });\n  },\n\n  /**\n   * Tells locus we're done sharing some or all of our screen.\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  releaseFloor() {\n    this.logger.info('call: releasing floor grant');\n    return Promise.resolve()\n      .then(waitForMediaShare(this))\n      .then((mediaShare) => this.spark.internal.locus.releaseFloorGrant(this.locus, mediaShare));\n  },\n\n  @oneFlight\n  /**\n   * Rejects an incoming call. Only applies to incoming calls. Invoking this\n   * method on an outgoing call is a no-op.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  reject() {\n    if (this.direction === 'out') {\n      return Promise.resolve();\n    }\n\n    this.logger.info('call: rejecting');\n    /* eslint no-invalid-this: [0] */\n    return this.spark.internal.locus.decline(this.locus)\n      .then((locus) => this.setLocus(locus))\n      .then(tap(() => this.cleanup()))\n      .then(tap(() => this.logger.info('call: rejected')));\n  },\n\n  /**\n   * Tells locus we'd like to share some or all of our screen.\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  requestFloor() {\n    this.logger.info('call: requesting floor grant');\n    return Promise.resolve()\n      .then(waitForMediaShare(this))\n      .then((mediaShare) => this.spark.internal.locus.requestFloorGrant(this.locus, mediaShare));\n  },\n\n  /**\n   * Assigns a new locus to this.locus according to locus sequencing rules\n   * @instance\n   * @memberof Call\n   * @param {Types~Locus} incoming\n   * @param {boolean} recursing - when true, indicates that this method has\n   * called itself and we should fall back to {@link locus.get()} instead of\n   * calling {@link locus.sync()}\n   * @private\n   * @returns {Promise}\n   */\n  setLocus(incoming, recursing = false) {\n    const current = this.locus;\n    if (!current) {\n      this.locus = incoming;\n      return Promise.resolve();\n    }\n    const action = this.spark.internal.locus.compare(current, incoming);\n\n    switch (action) {\n      case USE_INCOMING:\n        this.locus = this.spark.internal.locus.merge(this.locus, incoming);\n        if (this.device) {\n          this.correlationId = this.device.correlationId;\n        }\n        break;\n      case FETCH:\n        if (recursing) {\n          this.logger.info('call: fetching locus according to sequencing algorithm');\n          return this.spark.internal.locus.get(current)\n            .then((locus) => this.setLocus(locus, true));\n        }\n\n        this.logger.info('call: syncing locus according to sequencing algorithm');\n\n        return this.spark.internal.locus.sync(current)\n          .then((locus) => this.setLocus(locus, true));\n\n      default:\n      // do nothing\n    }\n\n    return Promise.resolve();\n  },\n\n  /**\n   * Send DTMF tones to the current call\n   * @instance\n   * @memberof Call\n   * @param {string} tones\n   * @returns {Promise}\n   */\n  sendDtmf(tones) {\n    if (!this.supportsDtmf) {\n      return Promise.reject(new Error('this call does not support dtmf'));\n    }\n\n    return this.spark.internal.locus.sendDtmf(this.locus, tones);\n  },\n\n  /**\n   * Sends feedback about the call to the Cisco Spark cloud\n   * @instance\n   * @memberof Call\n   * @param {FeedbackObject} feedback\n   * @returns {Promise}\n   */\n  sendFeedback(feedback) {\n    return this.spark.internal.metrics.submit('meetup_call_user_rating', feedback);\n  },\n\n  /**\n   * Shares a particular application as a second stream in the call\n   * @returns {Promise}\n   */\n  startApplicationShare() {\n    this.logger.info('call: sharing application');\n    return new Promise((resolve) => {\n      this.media.once('answeraccepted', resolve);\n      this.media.setMedia('screen', 'sendonly', {\n        mediaSource: 'application'\n      });\n    })\n      .then(() => this.requestFloor());\n  },\n\n  /**\n   * Shares the whole screen as a second stream in the call\n   * @returns {Promise}\n   */\n  startScreenShare() {\n    this.logger.info('call: sharing screen');\n\n    return new Promise((resolve) => {\n      this.media.once('answeraccepted', resolve);\n      this.media.setMedia('screen', 'sendonly', {\n        mediaSource: 'screen'\n      });\n    })\n      .then(() => this.requestFloor());\n  },\n\n  /**\n   * Start receiving audio\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startReceivingAudio() {\n    return this.changeReceivingMedia('audio', true);\n  },\n\n  /**\n   * Start receiving video\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startReceivingVideo() {\n    return this.changeReceivingMedia('video', true);\n  },\n\n  /**\n   * Starts sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingAudio() {\n    return this.changeSendingMedia('audio', true);\n  },\n\n  /**\n   * Starts sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingVideo() {\n    return this.changeSendingMedia('video', true);\n  },\n\n  /**\n   * Stops sharing an application or whole screen media stream\n   * @returns {Promise}\n   */\n  stopScreenShare() {\n    this.logger.info('call: stopping screen/application share');\n\n    return this.releaseFloor()\n      .then(() => new Promise((resolve) => {\n        this.media.once('answeraccepted', resolve);\n        this.media.setMedia('screen', 'inactive');\n      }));\n  },\n\n  /**\n   * Stop receiving audio\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopReceivingAudio() {\n    return this.changeReceivingMedia('audio', false);\n  },\n\n  /**\n   * Stop receiving video\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopReceivingVideo() {\n    return this.changeReceivingMedia('video', false);\n  },\n\n  /**\n   * Stops sending audio to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingAudio() {\n    return this.changeSendingMedia('audio', false);\n  },\n\n  /**\n   * Stops sending video to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingVideo() {\n    return this.changeSendingMedia('video', false);\n  },\n\n  /**\n   * Replaces the current mediaStrem with one with identical constraints, except\n   * for an opposite facing mode. If the current facing mode cannot be\n   * determined, the facing mode will be set to `user`. If the call is audio\n   * only, this function will throw.\n   * @instance\n   * @memberof Call\n   * @returns {undefined}\n   */\n  toggleFacingMode() {\n    if (!this.sendingVideo) {\n      throw new Error('Cannot toggle facingMode if we\\'re not sending video');\n    }\n\n    if (this.facingMode !== 'user' && this.facingMode !== 'environment') {\n      throw new Error('Cannot determine current facing mode; specify a new localMediaStream to change cameras');\n    }\n\n    const constraint = {\n      facingMode: {\n        ideal: this.facingMode === 'user' ? 'environment' : 'user'\n      }\n    };\n\n    this.media.setMedia('video', boolToStatus(true, this.sendingVideo), constraint);\n    return new Promise((resolve) => {\n      this.media.once('change:answerSdp', () => {\n        this.facingMode = constraint.facingMode.ideal;\n        resolve();\n      });\n    });\n  },\n\n  /**\n   * Toggles receiving audio from the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingAudio() {\n    return this.receivingAudio ? this.stopReceivingAudio() : this.startReceivingAudio();\n  },\n\n  /**\n   * Toggles receiving video from the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingVideo() {\n    return this.receivingVideo ? this.stopReceivingVideo() : this.startReceivingVideo();\n  },\n\n  /**\n   * Toggles sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingAudio() {\n    return this.sendingAudio ? this.stopSendingAudio() : this.startSendingAudio();\n  },\n\n  /**\n   * Toggles sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingVideo() {\n    return this.sendingVideo ? this.stopSendingVideo() : this.startSendingVideo();\n  },\n\n  /**\n   * Changes the status of media\n   * @instance\n   * @memberof Call\n   * @param {Object} payload\n   * @private\n   * @returns {Promise}\n   */\n  updateMedia(payload) {\n    if (payload.sdp && !payload.sdp.includes('b=')) {\n      throw new Error('outbound sdp should always have a \\'b=\\' line');\n    }\n    return this.spark.internal.locus.updateMedia(this.locus, payload)\n      .then((locus) => this.setLocus(locus));\n  },\n\n  @oneFlight\n  /**\n   * Tells locus we've got a new media direction\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  updateMuteToggles() {\n    return this.updateMedia({\n      sdp: this.media.offerSdp,\n      mediaId: this.mediaId,\n      audioMuted: didChange('audio', this.media.offerSdp, this.media.answerSdp) ? this.sendingAudio : !this.sendingAudio,\n      videoMuted: didChange('video', this.media.offerSdp, this.media.answerSdp) ? this.sendingVideo : !this.sendingVideo\n    })\n      .then(() => this.waitForExpectedLocus());\n  },\n\n  /**\n   * Checks that this.locus has the expected state\n   * @instance\n   * @memberof Call\n   * @param {Types~Locus} locus\n   * @private\n   * @returns {Promise}\n   */\n  validateLocusMediaState(locus) {\n    const locusAudio = locus.self.status.audioStatus.toLowerCase();\n    const mediaAudio = this.media.audioDirection;\n\n    if (locusAudio !== mediaAudio) {\n      this.logger.warn(`locus: expected audio ${locusAudio} (locus) to equal ${mediaAudio} (local media)`);\n      throw new Error('locus.self.status.audioStatus indicates the received DTO is out of date');\n    }\n\n    const locusVideo = locus.self.status.videoStatus.toLowerCase();\n    const mediaVideo = this.media.videoDirection;\n    if (locusVideo !== mediaVideo) {\n      this.logger.warn(`locus: expected video ${locusVideo} (locus) to equal ${mediaVideo} (local media)`);\n      throw new Error('locus.self.status.videoStatus indicates the received DTO is out of date');\n    }\n\n    return locus;\n  },\n\n  /**\n   * Waits until this.locus describes the expected state\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  waitForExpectedLocus() {\n    return new Promise((resolve) => {\n      const listener = () => {\n        try {\n          this.validateLocusMediaState(this.locus);\n          this.off('change:locus', listener);\n          resolve();\n        }\n        catch (err) {\n          this.logger.warn('locus: current locus not in expected state; waiting for next locus');\n        }\n      };\n      this.on('change:locus', listener);\n      listener();\n    });\n  }\n});\n\nCall.make = function make(attrs, options) {\n  return new Call(attrs, options);\n};\n\nexport default Call;\n"]}